{"version":3,"sources":["../../../server/config/seed.js"],"names":["User","sync","then","destroy","where","bulkCreate","provider","name","email","password","role","console","log"],"mappings":"AAAA;;;;;AAKA;;AACA;;;;;;AACA;AACA,IAAIA,OAAO,gBAAMA,IAAjB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAA,KAAKC,IAAL,GACGC,IADH,CACQ;AAAA,SAAMF,KAAKG,OAAL,CAAa,EAAEC,OAAO,EAAT,EAAb,CAAN;AAAA,CADR,EAEGF,IAFH,CAEQ,YAAM;AACVF,OAAKK,UAAL,CAAgB,CAAC;AACfC,cAAU,OADK;AAEfC,UAAM,WAFS;AAGfC,WAAO,kBAHQ;AAIfC,cAAU;AAJK,GAAD,EAKb;AACDH,cAAU,OADT;AAEDI,UAAM,OAFL;AAGDH,UAAM,OAHL;AAIDC,WAAO,mBAJN;AAKDC,cAAU;AALT,GALa,CAAhB,EAYCP,IAZD,CAYM,YAAM;AACVS,YAAQC,GAAR,CAAY,2BAAZ;AACD,GAdD;AAeD,CAlBH","file":"seed.js","sourcesContent":["/**\n * Populate DB with sample data on server start\n * to disable, edit config/environment/index.js, and set `seedDB: false`\n */\n\n'use strict';\nimport sqldb from '../sqldb';\n//var Thing = sqldb.Thing;\nvar User = sqldb.User;\n\n// Thing.sync()\n//   .then(() => {\n//     return Thing.destroy({ where: {} });\n//   })\n//   .then(() => {\n//     Thing.bulkCreate([{\n//       name: 'Development Tools',\n//       info: 'Integration with popular tools such as Bower, Grunt, Babel, Karma, ' +\n//              'Mocha, JSHint, Node Inspector, Livereload, Protractor, Jade, ' +\n//              'Stylus, Sass, and Less.'\n//     }, {\n//       name: 'Server and Client integration',\n//       info: 'Built with a powerful and fun stack: MongoDB, Express, ' +\n//              'AngularJS, and Node.'\n//     }, {\n//       name: 'Smart Build System',\n//       info: 'Build system ignores `spec` files, allowing you to keep ' +\n//              'tests alongside code. Automatic injection of scripts and ' +\n//              'styles into your index.html'\n//     }, {\n//       name: 'Modular Structure',\n//       info: 'Best practice client and server structures allow for more ' +\n//              'code reusability and maximum scalability'\n//     }, {\n//       name: 'Optimized Build',\n//       info: 'Build process packs up your templates as a single JavaScript ' +\n//              'payload, minifies your scripts/css/images, and rewrites asset ' +\n//              'names for caching.'\n//     }, {\n//       name: 'Deployment Ready',\n//       info: 'Easily deploy your app to Heroku or Openshift with the heroku ' +\n//              'and openshift subgenerators'\n//     }]);\n//   });\n\nUser.sync()\n  .then(() => User.destroy({ where: {} }))\n  .then(() => {\n    User.bulkCreate([{\n      provider: 'local',\n      name: 'Test User',\n      email: 'test@example.com',\n      password: 'test'\n    }, {\n      provider: 'local',\n      role: 'admin',\n      name: 'Admin',\n      email: 'admin@example.com',\n      password: 'admin'\n    }])\n    .then(() => {\n      console.log('finished populating users');\n    });\n  });\n"]}