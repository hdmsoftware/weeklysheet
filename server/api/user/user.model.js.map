{"version":3,"sources":["../../../../server/api/user/user.model.js"],"names":["authTypes","validatePresenceOf","value","length","module","exports","sequelize","DataTypes","User","define","_id","type","INTEGER","allowNull","primaryKey","autoIncrement","name","STRING","email","unique","msg","validate","isEmail","role","defaultValue","password","notEmpty","provider","salt","google","JSON","github","getterMethods","profile","token","hooks","beforeBulkCreate","users","fields","fn","totalUpdated","forEach","user","updatePassword","err","beforeCreate","beforeUpdate","changed","instanceMethods","authenticate","callback","encryptPassword","_this","pwdGen","makeSalt","byteSize","defaultByteSize","arguments","randomBytes","toString","defaultIterations","defaultKeyLength","Buffer","pbkdf2Sync","pbkdf2","key","indexOf","Error","saltErr","encryptErr","hashedPassword"],"mappings":"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","file":"user.model.js","sourcesContent":["'use strict';\n\nimport crypto from 'crypto';\nvar authTypes = ['github', 'twitter', 'facebook', 'google'];\n\nvar validatePresenceOf = function(value) {\n  return value && value.length;\n};\n\nmodule.exports = function(sequelize, DataTypes) {\n  var User = sequelize.define('User', {\n\n    _id: {\n      type: DataTypes.INTEGER,\n      allowNull: false,\n      primaryKey: true,\n      autoIncrement: true\n    },\n    name: DataTypes.STRING,\n    email: {\n      type: DataTypes.STRING,\n      unique: {\n        msg: 'The specified email address is already in use.'\n      },\n      validate: {\n        isEmail: true\n      }\n    },\n    role: {\n      type: DataTypes.STRING,\n      defaultValue: 'user'\n    },\n    password: {\n      type: DataTypes.STRING,\n      validate: {\n        notEmpty: true\n      }\n    },\n    provider: DataTypes.STRING,\n    salt: DataTypes.STRING,\n    google: DataTypes.JSON,\n    github: DataTypes.JSON\n\n  }, {\n\n    /**\n     * Virtual Getters\n     */\n    getterMethods: {\n      // Public profile information\n      profile: function() {\n        return {\n          'name': this.name,\n          'role': this.role\n        };\n      },\n\n      // Non-sensitive info we'll be putting in the token\n      token: function() {\n        return {\n          '_id': this._id,\n          'role': this.role\n        };\n      }\n    },\n\n    /**\n     * Pre-save hooks\n     */\n    hooks: {\n      beforeBulkCreate: function(users, fields, fn) {\n        var totalUpdated = 0;\n        users.forEach(function(user) {\n          user.updatePassword(function(err) {\n            if (err) {\n              return fn(err);\n            }\n            totalUpdated += 1;\n            if (totalUpdated === users.length) {\n              return fn();\n            }\n          });\n        });\n      },\n      beforeCreate: function(user, fields, fn) {\n        user.updatePassword(fn);\n      },\n      beforeUpdate: function(user, fields, fn) {\n        if (user.changed('password')) {\n          return user.updatePassword(fn);\n        }\n        fn();\n      }\n    },\n\n    /**\n     * Instance Methods\n     */\n    instanceMethods: {\n      /**\n       * Authenticate - check if the passwords are the same\n       *\n       * @param {String} password\n       * @param {Function} callback\n       * @return {Boolean}\n       * @api public\n       */\n      authenticate: function(password, callback) {\n        if (!callback) {\n          return this.password === this.encryptPassword(password);\n        }\n\n        var _this = this;\n        this.encryptPassword(password, function(err, pwdGen) {\n          if (err) {\n            callback(err);\n          }\n\n          if (_this.password === pwdGen) {\n            callback(null, true);\n          }\n          else {\n            callback(null, false);\n          }\n        });\n      },\n\n      /**\n       * Make salt\n       *\n       * @param {Number} byteSize Optional salt byte size, default to 16\n       * @param {Function} callback\n       * @return {String}\n       * @api public\n       */\n      makeSalt: function(byteSize, callback) {\n        var defaultByteSize = 16;\n\n        if (typeof arguments[0] === 'function') {\n          callback = arguments[0];\n          byteSize = defaultByteSize;\n        }\n        else if (typeof arguments[1] === 'function') {\n          callback = arguments[1];\n        }\n\n        if (!byteSize) {\n          byteSize = defaultByteSize;\n        }\n\n        if (!callback) {\n          return crypto.randomBytes(byteSize).toString('base64');\n        }\n\n        return crypto.randomBytes(byteSize, function(err, salt) {\n          if (err) {\n            callback(err);\n          }\n          return callback(null, salt.toString('base64'));\n        });\n      },\n\n      /**\n       * Encrypt password\n       *\n       * @param {String} password\n       * @param {Function} callback\n       * @return {String}\n       * @api public\n       */\n      encryptPassword: function(password, callback) {\n        if (!password || !this.salt) {\n          if (!callback) {\n            return null;\n          }\n          return callback(null);\n        }\n\n        var defaultIterations = 10000;\n        var defaultKeyLength = 64;\n        var salt = new Buffer(this.salt, 'base64');\n\n        if (!callback) {\n          return crypto.pbkdf2Sync(password, salt, defaultIterations, defaultKeyLength)\n                       .toString('base64');\n        }\n\n        return crypto.pbkdf2(password, salt, defaultIterations, defaultKeyLength,\n          function(err, key) {\n            if (err) {\n              callback(err);\n            }\n            return callback(null, key.toString('base64'));\n          });\n      },\n\n      /**\n       * Update password field\n       *\n       * @param {Function} fn\n       * @return {String}\n       * @api public\n       */\n      updatePassword: function(fn) {\n        // Handle new/update passwords\n        if (this.password) {\n          if (!validatePresenceOf(this.password) && authTypes.indexOf(this.provider) === -1) {\n            fn(new Error('Invalid password'));\n          }\n\n          // Make salt with a callback\n          var _this = this;\n          this.makeSalt(function(saltErr, salt) {\n            if (saltErr) {\n              fn(saltErr);\n            }\n            _this.salt = salt;\n            _this.encryptPassword(_this.password, function(encryptErr, hashedPassword) {\n              if (encryptErr) {\n                fn(encryptErr);\n              }\n              _this.password = hashedPassword;\n              fn(null);\n            });\n          });\n        } else {\n          fn(null);\n        }\n      }\n    }\n  });\n\n  return User;\n};\n"]}