{"version":3,"sources":["../../../../server/api/worker/worker.integration.js"],"names":["app","require","newWorker","describe","workers","beforeEach","done","get","expect","end","err","res","body","it","to","be","instanceOf","Array","post","send","name","info","equal","worker","_id","afterEach","updatedWorker","put","delete"],"mappings":"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","file":"worker.integration.js","sourcesContent":["'use strict';\n\nvar app = require('../..');\nimport request from 'supertest';\n\nvar newWorker;\n\ndescribe('Worker API:', function() {\n\n  describe('GET /api/workers', function() {\n    var workers;\n\n    beforeEach(function(done) {\n      request(app)\n        .get('/api/workers')\n        .expect(200)\n        .expect('Content-Type', /json/)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          workers = res.body;\n          done();\n        });\n    });\n\n    it('should respond with JSON array', function() {\n      expect(workers).to.be.instanceOf(Array);\n    });\n\n  });\n\n  describe('POST /api/workers', function() {\n    beforeEach(function(done) {\n      request(app)\n        .post('/api/workers')\n        .send({\n          name: 'New Worker',\n          info: 'This is the brand new worker!!!'\n        })\n        .expect(201)\n        .expect('Content-Type', /json/)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          newWorker = res.body;\n          done();\n        });\n    });\n\n    it('should respond with the newly created worker', function() {\n      expect(newWorker.name).to.equal('New Worker');\n      expect(newWorker.info).to.equal('This is the brand new worker!!!');\n    });\n\n  });\n\n  describe('GET /api/workers/:id', function() {\n    var worker;\n\n    beforeEach(function(done) {\n      request(app)\n        .get('/api/workers/' + newWorker._id)\n        .expect(200)\n        .expect('Content-Type', /json/)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          worker = res.body;\n          done();\n        });\n    });\n\n    afterEach(function() {\n      worker = {};\n    });\n\n    it('should respond with the requested worker', function() {\n      expect(worker.name).to.equal('New Worker');\n      expect(worker.info).to.equal('This is the brand new worker!!!');\n    });\n\n  });\n\n  describe('PUT /api/workers/:id', function() {\n    var updatedWorker;\n\n    beforeEach(function(done) {\n      request(app)\n        .put('/api/workers/' + newWorker._id)\n        .send({\n          name: 'Updated Worker',\n          info: 'This is the updated worker!!!'\n        })\n        .expect(200)\n        .expect('Content-Type', /json/)\n        .end(function(err, res) {\n          if (err) {\n            return done(err);\n          }\n          updatedWorker = res.body;\n          done();\n        });\n    });\n\n    afterEach(function() {\n      updatedWorker = {};\n    });\n\n    it('should respond with the updated worker', function() {\n      expect(updatedWorker.name).to.equal('Updated Worker');\n      expect(updatedWorker.info).to.equal('This is the updated worker!!!');\n    });\n\n  });\n\n  describe('DELETE /api/workers/:id', function() {\n\n    it('should respond with 204 on successful removal', function(done) {\n      request(app)\n        .delete('/api/workers/' + newWorker._id)\n        .expect(204)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          done();\n        });\n    });\n\n    it('should respond with 404 when worker does not exist', function(done) {\n      request(app)\n        .delete('/api/workers/' + newWorker._id)\n        .expect(404)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          done();\n        });\n    });\n\n  });\n\n});\n"]}