{"version":3,"sources":["../../../../server/api/workerload/workerload.integration.js"],"names":["app","require","newWorkerload","describe","workerloads","beforeEach","done","get","expect","end","err","res","body","it","to","be","instanceOf","Array","post","send","name","info","equal","workerload","_id","afterEach","updatedWorkerload","put","delete"],"mappings":"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","file":"workerload.integration.js","sourcesContent":["'use strict';\n\nvar app = require('../..');\nimport request from 'supertest';\n\nvar newWorkerload;\n\ndescribe('Workerload API:', function() {\n\n  describe('GET /api/workerloads', function() {\n    var workerloads;\n\n    beforeEach(function(done) {\n      request(app)\n        .get('/api/workerloads')\n        .expect(200)\n        .expect('Content-Type', /json/)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          workerloads = res.body;\n          done();\n        });\n    });\n\n    it('should respond with JSON array', function() {\n      expect(workerloads).to.be.instanceOf(Array);\n    });\n\n  });\n\n  describe('POST /api/workerloads', function() {\n    beforeEach(function(done) {\n      request(app)\n        .post('/api/workerloads')\n        .send({\n          name: 'New Workerload',\n          info: 'This is the brand new workerload!!!'\n        })\n        .expect(201)\n        .expect('Content-Type', /json/)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          newWorkerload = res.body;\n          done();\n        });\n    });\n\n    it('should respond with the newly created workerload', function() {\n      expect(newWorkerload.name).to.equal('New Workerload');\n      expect(newWorkerload.info).to.equal('This is the brand new workerload!!!');\n    });\n\n  });\n\n  describe('GET /api/workerloads/:id', function() {\n    var workerload;\n\n    beforeEach(function(done) {\n      request(app)\n        .get('/api/workerloads/' + newWorkerload._id)\n        .expect(200)\n        .expect('Content-Type', /json/)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          workerload = res.body;\n          done();\n        });\n    });\n\n    afterEach(function() {\n      workerload = {};\n    });\n\n    it('should respond with the requested workerload', function() {\n      expect(workerload.name).to.equal('New Workerload');\n      expect(workerload.info).to.equal('This is the brand new workerload!!!');\n    });\n\n  });\n\n  describe('PUT /api/workerloads/:id', function() {\n    var updatedWorkerload;\n\n    beforeEach(function(done) {\n      request(app)\n        .put('/api/workerloads/' + newWorkerload._id)\n        .send({\n          name: 'Updated Workerload',\n          info: 'This is the updated workerload!!!'\n        })\n        .expect(200)\n        .expect('Content-Type', /json/)\n        .end(function(err, res) {\n          if (err) {\n            return done(err);\n          }\n          updatedWorkerload = res.body;\n          done();\n        });\n    });\n\n    afterEach(function() {\n      updatedWorkerload = {};\n    });\n\n    it('should respond with the updated workerload', function() {\n      expect(updatedWorkerload.name).to.equal('Updated Workerload');\n      expect(updatedWorkerload.info).to.equal('This is the updated workerload!!!');\n    });\n\n  });\n\n  describe('DELETE /api/workerloads/:id', function() {\n\n    it('should respond with 204 on successful removal', function(done) {\n      request(app)\n        .delete('/api/workerloads/' + newWorkerload._id)\n        .expect(204)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          done();\n        });\n    });\n\n    it('should respond with 404 when workerload does not exist', function(done) {\n      request(app)\n        .delete('/api/workerloads/' + newWorkerload._id)\n        .expect(404)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          done();\n        });\n    });\n\n  });\n\n});\n"]}